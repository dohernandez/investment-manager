{% extends 'base.html.twig' %}

{% block page_subtitle %}{{ stock|trans|title|upper }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}

    {% include 'Components/Panel/panel-table-css.html.twig' %}
{%  endblock %}

{% block page_content %}
    {% include 'Components/Panel/panel-table.html.twig' %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    {% include 'Components/Panel/panel-table-scripts.html.twig' %}

    <script src="{{ asset('build/stock_dividend_form.js') }}"></script>

    <script>
        $(document).ready(function() {
            // Create page instance
            let $panelBox = $('.{{ js_panel_class|default('js-panel-box') }}');

            let contentWrapper = $panelBox.closest('section');
            let entityType = $panelBox.data('entity-type');

            // Create panelTable instance @see assets/js/PanelTable.js
            let panelTable = new PanelTable({
                entityType: entityType,
                wrapper: contentWrapper,
                pagination: true,
                selectors: {
                    searchTemplate: '#js-table-{{ entity_name|lower|replace({' ': '_'}) }}-search-template',
                    showPerPageTemplate: '#js-table-{{ entity_name|lower|replace({' ': '_'}) }}-show-per-page-template',
                    rowTemplate: '#js-table-{{ entity_name|lower|replace({' ': '_'}) }}-row-template',
                },
                sort: function (aStockDividend, bStockDividend) {
                    let a = new Date(aStockDividend.exDate);
                    let b = new Date(bStockDividend.exDate);

                    return a > b ? -1 : a < b ? 1 : 0;
                }
            });

            // Create form use in crudManager
            const form = new StockDividendForm(
                window.swalOptions,
                panelTable,
                '#js-table-{{ entity_name|lower|replace({' ': '_'}) }}-form-template',
            );

            const syncButton = new Button(
                '.js-entity-sync',
                '#js-table-{{ entity_name|lower|replace({' ': '_'}) }}-sync-button-template',
                '.js-panel-header-button-container',
                function (e) {
                    e.preventDefault();

                    // disable button
                    let $button = $(e.currentTarget);

                    $button.attr("disabled", true);
                    $button.find('i').addClass('fa-spin');

                    InvestmentManagerClient.sendRPC(
                        Routing.generate(entityType + '_sync', {'_id': {{ stock.id }}}),
                        'GET'
                    ).then((result) => {
                        panelTable.setData(result);

                        $button.attr("disabled", false);
                        $button.find('i').removeClass('fa-spin');
                    }).catch((errorsData) => {
                        console.log(errorsData);

                        $button.attr("disabled", false);
                        $button.find('i').removeClass('fa-spin');
                    });
                },
            );
            panelTable.addButton(syncButton);

            panelTable.render();
            panelTable.loadRows(
                function () {
                    let param = {
                        '_id': {{ stock.id }}
                    };

                    return Routing.generate('{{ entity_name|lower|replace({' ': '_'}) }}_list', param);
                });

            // Overwrite the default routing strategy. Default routing strategy only consider single id
            {#crudManager.setRouteGenerating((entityType, endpoint, id = null) => {#}
            {#    let route = '';#}
            {#    let param = {#}
            {#        '_id': {{ stock.id }}#}
            {#    };#}

            {#    if (id) {#}
            {#        param['id'] = id;#}
            {#    }#}

            {#    switch (endpoint) {#}
            {#        case 'list':#}
            {#            route = Routing.generate(entityType + '_list', param);#}

            {#            break;#}
            {#        case 'new':#}
            {#            route = Routing.generate(entityType + '_new', param);#}

            {#            break;#}
            {#        case 'get':#}
            {#            route = Routing.generate(entityType + '_get', param);#}

            {#            break;#}
            {#        case 'edit':#}
            {#            route = Routing.generate(entityType + '_edit', param);#}

            {#            break;#}
            {#        case 'delete':#}
            {#            route = Routing.generate(entityType + '_delete', param);#}

            {#            break;#}
            {#        default:#}
            {#            throw 'Endpoint ' + endpoint + ' not supported';#}
            {#    }#}

            {#    return route#}
            {#});#}

            {#crudManager.render(function () {#}
            {#    // add sync button to the table#}
            {#    // Delegate selector#}
            {#    this.$wrapper.on(#}
            {#        'click',#}
            {#        '.js-entity-sync',#}
            {#        function (e) {#}
            {#            e.preventDefault();#}

            {#            // disable button#}
            {#            let $button = $(e.currentTarget);#}

            {#            $button.attr("disabled", true);#}
            {#            $button.find('i').addClass('fa-spin');#}

            {#            InvestmentManagerClient.sendRPC(#}
            {#                Routing.generate(entityType + '_sync', {'_id': {{ stock.id }}}),#}
            {#                'GET'#}
            {#            ).then((result) => {#}
            {#                this.setData(result);#}

            {#                $button.attr("disabled", false);#}
            {#                $button.find('i').removeClass('fa-spin');#}
            {#            }).catch((errorsData) => {#}
            {#                console.log(errorsData);#}

            {#                $button.attr("disabled", false);#}
            {#                $button.find('i').removeClass('fa-spin');#}
            {#            });#}

            {#        }.bind(this)#}
            {#    );#}

            {#    let $syncButton = this._compileTemplate("#js-manager-{{ entity_name|lower|replace({' ': '_'}) }}-sync-button-template");#}
            {#    this.$wrapper.find(this.selectors.createButtonContainer)#}
            {#        .prepend($syncButton);#}
            // });
        });
    </script>

    <!-- sync button table template -->
    <script type="text/template" id="js-table-{{ entity_name|lower|replace({' ': '_'}) }}-sync-button-template">
        <button class="js-entity-sync btn btn-warning pull-right" style="margin-right: 8px;">
            <i class="fa-sync fas" aria-hidden="true"></i>
            {{ 'Sync'|trans }} {{ entity_name|trans|lower }}
        </button>
    </script>
{% endblock %}
