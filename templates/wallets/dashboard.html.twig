{% extends 'base.html.twig' %}

{% block page_subtitle %}{{ wallet.name }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}

    {% include 'Components/Panel/panel-table-css.html.twig' %}

{#    <link rel="stylesheet" href="{{ asset('build/wallet_dashboard.css') }}">#}
    <link rel="stylesheet" href="{{ asset('build/wallet_dashboard.css') }}">
{% endblock %}

{% block page_content %}

    {% include 'wallets/partial/head-dashboard.html.twig' %}
    {% include 'wallets/partial/position-box.html.twig' %}
    {% include 'wallets/partial/dividend-box.html.twig' %}
    {% include 'wallets/partial/operation-box.html.twig' %}

{% endblock %}

{% block javascripts %}
    {{ parent() }}

    {% include 'Components/Panel/panel-table-scripts.html.twig' %}

    <script src="{{ asset('build/wallet_dashboard.js') }}"></script>

    <script>
        $(document).ready(function() {
            const eventBus = window.eventBus;

            // Create position panel instance
            let $positionPanelBox = $('.js-position-panel-box');

            let positionContentWrapper = $positionPanelBox.closest('.js-position-panel');
            let positionEntityType = $positionPanelBox.data('entity-type');

            const searchFuncPanel = function (entities, search) {
                if (search.length >= 2) {
                    let $matches = [];

                    search = search.toUpperCase();

                    $.each(entities, function (index, entity) {
                        if (entity.stock) {
                            if (entity.stock.name.toUpperCase().indexOf(search) > -1 ||
                                entity.stock.symbol.toUpperCase().indexOf(search) > -1 ) {

                                $matches.push(entity);
                            }
                        }
                    });

                    return $matches;
                }

                return null;
            };

            // Create panelTable instance @see assets/js/PanelTable.js
            let positionPanelTable = new PanelTable({
                entityType: positionEntityType,
                wrapper: positionContentWrapper,
                pagination: false,
                selectors: {
                    searchTemplate: '#js-table-{{ wallet_position_entity_name|lower|replace({' ': '_'}) }}-search-template',
                    showPerPageTemplate: '#js-table-{{ wallet_position_entity_name|lower|replace({' ': '_'}) }}-show-per-page-template',
                    rowTemplate: '#js-table-{{ wallet_position_entity_name|lower|replace({' ': '_'}) }}-row-template',
                },
                sort: function (aPosition, bPosition) {
                    let a = aPosition.stock.name;
                    let b = bPosition.stock.name;

                    return a < b ? -1 : a > b ? 1 : 0;
                },
                searchFunc: searchFuncPanel,
                afterSearchFunc: function (search) {
                    eventBus.emit('position_searched', null, search);
                },
                afterCleanSearchFunc: function () {
                    eventBus.emit('position_search_cleaned', null);
                }
            });

            // Create dividend panel instance
            let $dividendPanelBox = $('.js-position-dividend-panel-box');

            let dividendContentWrapper = $dividendPanelBox.closest('.js-dividend-panel');
            let dividendEntityType = $dividendPanelBox.data('entity-type');

            // Create panelTable instance @see assets/js/PanelTable.js
            let dividendPanelTable = new PanelTable({
                entityType: dividendEntityType,
                wrapper: dividendContentWrapper,
                pagination: false,
                selectors: {
                    searchTemplate: '#js-table-{{ wallet_position_dividend_entity_name|lower|replace({' ': '_'}) }}-search-template',
                    showPerPageTemplate: '#js-table-{{ wallet_position_dividend_entity_name|lower|replace({' ': '_'}) }}-show-per-page-template',
                    rowTemplate: '#js-table-{{ wallet_position_dividend_entity_name|lower|replace({' ': '_'}) }}-row-template',
                },
                sort: function (aPosition, bPosition) {
                    let a = aPosition.stock.name;
                    let b = bPosition.stock.name;

                    return a < b ? -1 : a > b ? 1 : 0;
                },
                searchFunc: searchFuncPanel,
                showSearchBox: false,
            });

            // Create dividend panel instance
            let $operationPanelBox = $('.js-operation-panel-box');

            let operationContentWrapper = $operationPanelBox.closest('.js-operation-panel');
            let operationEntityType = $operationPanelBox.data('entity-type');

            // Create panelTable instance @see assets/js/PanelTable.js
            let operationPanelTable = new PanelTable({
                entityType: operationEntityType,
                wrapper: operationContentWrapper,
                pagination: true,
                selectors: {
                    searchTemplate: '#js-table-{{ wallet_operation_entity_name|lower|replace({' ': '_'}) }}-search-template',
                    showPerPageTemplate: '#js-table-{{ wallet_operation_entity_name|lower|replace({' ': '_'}) }}-show-per-page-template',
                    rowTemplate: '#js-table-{{ wallet_operation_entity_name|lower|replace({' ': '_'}) }}-row-template',
                },
                sort: function (aOperation, bOperation) {
                    let a = new Date(aOperation.dateAt);
                    let b = new Date(bOperation.dateAt);

                    return a > b ? -1 : a < b ? 1 : 0;
                },
                searchFunc: searchFuncPanel,
                showSearchBox: false,
            });

            const swalOperationOptions = window.swalOperationOptions;
            const urlCreateOperation = Routing.generate(
                'wallet_{{ wallet_operation_entity_name|lower|replace({' ': '_'}) }}_new',
                {'_id': {{ wallet.id }}}
            );
            const createOperationEventName = 'entity_operation_created';

            const operationForm = new OperationForm(
                swalOperationOptions,
                operationPanelTable,
                '#js-panel-{{ wallet_operation_entity_name|lower|replace({' ': '_'}) }}-form-template',
            );

            const createButton = new CreateButton(
                '{{ 'Create new'|trans }} {{ wallet_operation_entity_name|trans|lower }}',
                operationForm,
                function () {
                    return urlCreateOperation;
                },
                '.js-entity-create',
                '.js-panel-header-button-container',
                createOperationEventName
            );
            operationPanelTable.addButton(createButton);

            // Setting the relation with the same form as the operation panel.
            positionPanelTable.addButton(createButton);

            const swalOptionsCreateOperation = {
                options: swalOperationOptions.editView,
                onBeforeOpen: operationForm.onBeforeOpenEditView.bind(operationForm),
                confirmButtonText: swalOperationOptions.text.create.confirmButtonText,
                titleText: swalOperationOptions.text.create.titleText,
                toastTitleText: swalOperationOptions.text.create.toastTitleText,
            };

            $.each(['dividend', 'buy', 'sell'], function (index, type) {
                const positionDividendRowButton = new PositionOperationRowButton(
                    operationForm,
                    swalOptionsCreateOperation,
                    type,
                    urlCreateOperation,
                    createOperationEventName
                );
                positionPanelTable.addRowButton(positionDividendRowButton);
            });

            let panel = new WalletDashboard(
                {{ wallet.id }},
                positionPanelTable,
                dividendPanelTable,
                operationPanelTable
            );

            panel.render();
            panel.load();

            // Tweak button toggle main menu to show/hide columns
            $('.sidebar-toggle').on(
                'click',
                function(e) {
                    let $button = $(e.currentTarget);

                    if ($button.data('toggle') === 'push-menu') {
                        positionPanelTable.toggleExpanded();
                        dividendPanelTable.toggleExpanded();
                    }
                }
            );
        });
    </script>

{% endblock %}
