{% extends 'base.html.twig' %}

{% block page_subtitle %}{{ wallet.name }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}

    {% include 'Components/ui/crud-manage-css.html.twig' %}

    <link rel="stylesheet" href="{{ asset('build/wallet_dashboard.css') }}">
{% endblock %}

{% block page_content %}

    {% include 'wallets/partial/head-dashboard.html.twig' %}
    {% include 'wallets/partial/position-box.html.twig' %}
    {% include 'wallets/partial/operation-box.html.twig' %}

{% endblock %}

{% block javascripts %}
    {{ parent() }}

    {% include 'Components/ui/crud-manage-scripts.html.twig' %}
    <script src="{{ asset('build/wallet_dashboard.js') }}"></script>

    <!-- positionCrudManager -->
    {% embed 'Components/ui/crud-manage-table-scripts.html.twig' with {
        'entity_name': position_entity_name,
        'fields': wallet_position_fields,
    }%}
    {% endembed %}

    <script>
        $(document).ready(function() {
            // Create page instance
            let $positionCrudManagerRowBox = $('.js-position-crud-manage-row-box');

            let positionContentWrapper = $positionCrudManagerRowBox.closest('div');
            let positionEntityType = $positionCrudManagerRowBox.data('entity-type');

            // Create CRUDManage instance @see public/assets/js/CRUDManage.js
            let positionCrudManager = new CRUDManage({
                entityType: positionEntityType,
                wrapper: positionContentWrapper,
                swalFormOptions: window.swalFormOptions,
                swalConfirmOptions: window.swalConfirmOptions,
                toastOptions: window.toastOptions,
                pagination: true,
                selectors: {
                    createButtonTemplate: '#js-manager-{{ position_entity_name|lower|replace({' ': '_'}) }}-create-button-template',
                    searchTemplate: '#js-manager-{{ position_entity_name|lower|replace({' ': '_'}) }}-search-template',
                    showPerPageTemplate: '#js-manager-{{ position_entity_name|lower|replace({' ': '_'}) }}-show-per-page-template',
                    rowTemplate: '#js-manager-{{ position_entity_name|lower|replace({' ': '_'}) }}-row-template',
                },
            });

            positionCrudManager.setRouteGenerating((entityType, endpoint, id = null) => {
                let param = {
                    '_id': {{ wallet.id }},
                    's': 'open'
                };

                if (id) {
                    param['id'] = id;
                }

                if (endpoint === 'list') {
                    return Routing.generate('wallet_' + entityType + '_list', param);
                }

                throw 'Endpoint wallet_' + endpoint + ' not supported';
            });

            positionCrudManager.render();

            window.positionCrudManager = positionCrudManager;
        });
    </script>

    <!-- operationCrudManager -->
    {% embed 'Components/ui/crud-manage-table-scripts.html.twig' with {
        'entity_name': operation_entity_name,
        'fields': wallet_operation_fields,
        'create_button_label': 'Add new'|trans ~ ' ' ~ operation_entity_name|trans|lower,
        'form': waller_operation_form,
    }%}
    {% endembed %}

    <script>
        $(document).ready(function() {
            let swalFormOperationOptionsText = {
                create: {
                    confirmButtonText: '{{ 'Create'|trans }}',
                    titleText: '{{ 'Add new'|trans }} {{ operation_entity_name|trans|title }}',
                    toastTitleText: '{{ operation_entity_name|trans|title }} {{ 'was added successfully.'|trans }}'
                },
            };

            // Create page instance
            let $operationCrudManagerRowBox = $('.js-operation-crud-manage-row-box');

            let operationContentWrapper = $operationCrudManagerRowBox.closest('div');
            let operationEntityType = $operationCrudManagerRowBox.data('entity-type');

            let swalConfirmOptions = window.swalFormOptions;
            swalConfirmOptions.titleText = '{{ 'Delete'|trans }} {{ operation_entity_name|trans|title }}';
            swalConfirmOptions.text = '{{ 'Do you want to delete the'|trans }} {{ operation_entity_name|trans|title|lower }} {0}?';

            let toastOptions = window.toastOptions;
            toastOptions.titleText = '{{ operation_entity_name|trans|title }} {{ 'was {0} successfully.'|trans }}';

            // Create CRUDManage instance @see public/assets/js/CRUDManage.js
            let operationCrudManager = new CRUDManage({
                entityType: operationEntityType,
                wrapper: operationContentWrapper,
                swalFormOptions: window.swalFormOptions,
                swalConfirmOptions: swalConfirmOptions,
                toastOptions: toastOptions,
                pagination: true,
                selectors: {
                    createButtonTemplate: '#js-manager-{{ operation_entity_name|lower|replace({' ': '_'}) }}-create-button-template',
                    searchTemplate: '#js-manager-{{ operation_entity_name|lower|replace({' ': '_'}) }}-search-template',
                    showPerPageTemplate: '#js-manager-{{ operation_entity_name|lower|replace({' ': '_'}) }}-show-per-page-template',
                    rowTemplate: '#js-manager-{{ operation_entity_name|lower|replace({' ': '_'}) }}-row-template',
                },
            });

            operationCrudManager.setRouteGenerating((entityType, endpoint, id = null) => {
                let route = '';
                let param = {
                    '_id': {{ wallet.id }}
                };

                if (id) {
                    param['id'] = id;
                }

                switch (endpoint) {
                    case 'list':
                        route = Routing.generate('wallet_' + entityType + '_list', param);

                        break;
                    case 'new':
                        route = Routing.generate('wallet_' + entityType + '_new', param);

                        break;
                    case 'edit':
                        route = Routing.generate('wallet_' + entityType + '_edit', param);

                        break;
                    case 'delete':
                        route = Routing.generate('wallet_' + entityType + '_delete', param);

                        break;
                    default:
                        throw 'Endpoint wallet_' + endpoint + ' not supported';
                }

                return route
            });

            let swalFormOptionsText = {
                create: {
                    confirmButtonText: '{{ 'Create'|trans }}',
                    titleText: '{{ 'Create new'|trans }} {{ entity_name|trans|title }}',
                    toastTitleText: '{{ entity_name|trans|title }} {{ 'was created successfully.'|trans }}'
                },
                update: {
                    confirmButtonText: '{{ 'Update'|trans }}',
                    titleText: '{{ 'Update'|trans }} {{ entity_name|trans|title }}',
                    toastTitleText: '{{ entity_name|trans|title }} {{ 'was updated successfully.'|trans }}'
                },
                delete: {
                    toastTitleText: '{{ entity_name|trans|title }} {{ 'was deleted successfully.'|trans }}'
                }
            };

            const form = new OperationForm(
                window.positionCrudManager,
                swalFormOptionsText,
                '#js-manager-{{ operation_entity_name|lower|replace({' ': '_'}) }}-form-template',
            );

            operationCrudManager.withForm(form);
            operationCrudManager.withCreateButton();

            operationCrudManager.render();
        });
    </script>
{% endblock %}
