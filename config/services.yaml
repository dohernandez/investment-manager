# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en
    upload_note_dir: '%kernel.project_dir%/public/upload/notes/files'
    margin_rate: 0.475
    jms_serializer.camel_case_naming_strategy.class: JMS\Serializer\Naming\IdenticalPropertyNamingStrategy

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,AppBundle,Infrastructure}'

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Doctrine event
    App\EventListener\PersistTransferListener:
        tags:
            - { name: doctrine.event_listener, event: prePersist }

    App\EventListener\PersistWalletListener:
        tags:
            - { name: doctrine.event_listener, event: prePersist }

    App\EventListener\PersistOperationListener:
        tags:
            - { name: doctrine.event_listener, event: prePersist }

    # Classes
    Goutte\Client: ~

    # Interfaces
    App\Client\DividendsClientInterface: '@dividends.client'

    # Client
    Symfony\Contracts\HttpClient\HttpClientInterface:
        factory: ['Symfony\Component\HttpClient\HttpClient', 'create']

    dividends.client:
        class: App\Client\NasdaqDividendsClient


    ##### PRESENTATION LAYER START

    # makes classes in src/Presentation available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\Presentation\:
        resource: '../src/Presentation/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../src/Presentation/{Controller,Console,Normalizer}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    App\Presentation\Controller\:
        resource: '../src/Presentation/Controller'
        public: true
        tags: ['controller.service_arguments']

    # commands are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    App\Presentation\Console\:
        resource: '../src/Presentation/Console'
        public: true
        tags: ['console.command']

    ##### PRESENTATION LAYER END


    ##### APPLICATION LAYER START

    # Interfaces
    App\Application\Account\Repository\AccountRepositoryInterface: '@App\Infrastructure\Storage\AccountRepository'
    App\Application\Account\Repository\ProjectionAccountRepositoryInterface: '@App\Infrastructure\Storage\ProjectionAccountRepository'

    App\Application\Transfer\Repository\TransferRepositoryInterface: '@App\Infrastructure\Storage\Transfer\TransferRepository'
    App\Application\Transfer\Repository\AccountRepositoryInterface: '@App\Infrastructure\Storage\Transfer\AccountRepository'
    App\Application\Transfer\Repository\ProjectionTransferRepositoryInterface: '@App\Infrastructure\Storage\Transfer\ProjectionTransferRepository'

    App\Application\Broker\Repository\BrokerRepositoryInterface: '@App\Infrastructure\Storage\Broker\BrokerRepository'
    App\Application\Broker\Repository\ProjectionBrokerRepositoryInterface: '@App\Infrastructure\Storage\Broker\ProjectionBrokerRepository'

    ##### APPLICATION LAYER END


    ##### INFRASTRUCTURE LAYER START

    # makes classes in src/Infrastructure available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\Infrastructure\:
        resource: '../src/Infrastructure/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../src/Infrastructure/{Aggregator,Money}'

    app.doctrine.entity_listener:
        class: App\Infrastructure\EventSource\EventSourceListener
        arguments: ['@event_dispatcher']
        public: true

    app.doctrine.entity_listener_resolver:
        class: App\Infrastructure\Doctrine\EntityListenerResolver
        arguments: [ '@service_container' ]
        calls:
            - [addMapping, ['App\Infrastructure\EventSource\EventSourceListener', 'app.doctrine.entity_listener']]

    # Storage
    App\Infrastructure\Storage\ProjectionAccountRepository: ~
    App\Infrastructure\Storage\AccountRepository: ~

    App\Infrastructure\Storage\Transfer\TransferRepository: ~
    App\Infrastructure\Storage\Transfer\AccountRepository: ~
    App\Infrastructure\Storage\Transfer\ProjectionTransferRepository: ~

    App\Infrastructure\Storage\Broker\BrokerRepository: ~
    App\Infrastructure\Storage\Broker\ProjectionBrokerRepository: ~

    ##### INFRASTRUCTURE LAYER END
